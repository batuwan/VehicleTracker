// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using VehicleTracker.Data;

namespace VehicleTracker.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("VehicleTracker.Core.Model.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("VehicleTracker.Core.Model.VehicleMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date_")
                        .HasColumnType("datetime2");

                    b.Property<Geometry>("Geom")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("Velocity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleMoves");
                });

            modelBuilder.Entity("VehicleTracker.Core.Model.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Geometry>("Geom")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("VehicleTracker.Core.Model.ZoneRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date_")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RecordType")
                        .HasColumnType("bit");

                    b.Property<int?>("VehicleId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("VehicleMoveId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleMoveId");

                    b.HasIndex("ZoneId");

                    b.ToTable("ZoneRecords");
                });

            modelBuilder.Entity("VehicleTracker.Core.Model.VehicleMove", b =>
                {
                    b.HasOne("VehicleTracker.Core.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleMoves")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Core.Model.ZoneRecord", b =>
                {
                    b.HasOne("VehicleTracker.Core.Model.Vehicle", "Vehicle")
                        .WithMany("ZoneRecords")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VehicleTracker.Core.Model.VehicleMove", "VehicleMove")
                        .WithMany()
                        .HasForeignKey("VehicleMoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleTracker.Core.Model.Zone", "Zone")
                        .WithMany("ZoneRecords")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleMove");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("VehicleTracker.Core.Model.Vehicle", b =>
                {
                    b.Navigation("VehicleMoves");

                    b.Navigation("ZoneRecords");
                });

            modelBuilder.Entity("VehicleTracker.Core.Model.Zone", b =>
                {
                    b.Navigation("ZoneRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
